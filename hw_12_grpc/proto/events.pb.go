// Code generated by protoc-gen-go. DO NOT EDIT.
// source: events.proto

package proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type CreateEventMessage struct {
	Status               string   `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateEventMessage) Reset()         { *m = CreateEventMessage{} }
func (m *CreateEventMessage) String() string { return proto.CompactTextString(m) }
func (*CreateEventMessage) ProtoMessage()    {}
func (*CreateEventMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_8f22242cb04491f9, []int{0}
}

func (m *CreateEventMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateEventMessage.Unmarshal(m, b)
}
func (m *CreateEventMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateEventMessage.Marshal(b, m, deterministic)
}
func (m *CreateEventMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateEventMessage.Merge(m, src)
}
func (m *CreateEventMessage) XXX_Size() int {
	return xxx_messageInfo_CreateEventMessage.Size(m)
}
func (m *CreateEventMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateEventMessage.DiscardUnknown(m)
}

var xxx_messageInfo_CreateEventMessage proto.InternalMessageInfo

func (m *CreateEventMessage) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func init() {
	proto.RegisterType((*CreateEventMessage)(nil), "proto.CreateEventMessage")
}

func init() { proto.RegisterFile("events.proto", fileDescriptor_8f22242cb04491f9) }

var fileDescriptor_8f22242cb04491f9 = []byte{
	// 121 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x49, 0x2d, 0x4b, 0xcd,
	0x2b, 0x29, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x05, 0x53, 0x4a, 0x3a, 0x5c, 0x42,
	0xce, 0x45, 0xa9, 0x89, 0x25, 0xa9, 0xae, 0x20, 0x49, 0xdf, 0xd4, 0xe2, 0xe2, 0xc4, 0xf4, 0x54,
	0x21, 0x31, 0x2e, 0xb6, 0xe2, 0x92, 0xc4, 0x92, 0xd2, 0x62, 0x09, 0x46, 0x05, 0x46, 0x0d, 0xce,
	0x20, 0x28, 0xcf, 0x28, 0x05, 0x45, 0x75, 0x70, 0x6a, 0x51, 0x59, 0x66, 0x72, 0xaa, 0x90, 0x1f,
	0x97, 0x58, 0x71, 0x6a, 0x5e, 0x0a, 0x16, 0x73, 0x24, 0x21, 0x96, 0xe9, 0x61, 0x4a, 0x49, 0xe1,
	0x96, 0x72, 0x62, 0x8f, 0x82, 0x38, 0x2e, 0x89, 0x0d, 0x4c, 0x19, 0x03, 0x02, 0x00, 0x00, 0xff,
	0xff, 0x57, 0x77, 0x39, 0xac, 0xba, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CreateEventServiceClient is the client API for CreateEventService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CreateEventServiceClient interface {
	SendCreateEventMessage(ctx context.Context, in *CreateEventMessage, opts ...grpc.CallOption) (*CreateEventMessage, error)
}

type createEventServiceClient struct {
	cc *grpc.ClientConn
}

func NewCreateEventServiceClient(cc *grpc.ClientConn) CreateEventServiceClient {
	return &createEventServiceClient{cc}
}

func (c *createEventServiceClient) SendCreateEventMessage(ctx context.Context, in *CreateEventMessage, opts ...grpc.CallOption) (*CreateEventMessage, error) {
	out := new(CreateEventMessage)
	err := c.cc.Invoke(ctx, "/proto.CreateEventService/sendCreateEventMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CreateEventServiceServer is the server API for CreateEventService service.
type CreateEventServiceServer interface {
	SendCreateEventMessage(context.Context, *CreateEventMessage) (*CreateEventMessage, error)
}

// UnimplementedCreateEventServiceServer can be embedded to have forward compatible implementations.
type UnimplementedCreateEventServiceServer struct {
}

func (*UnimplementedCreateEventServiceServer) SendCreateEventMessage(ctx context.Context, req *CreateEventMessage) (*CreateEventMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendCreateEventMessage not implemented")
}

func RegisterCreateEventServiceServer(s *grpc.Server, srv CreateEventServiceServer) {
	s.RegisterService(&_CreateEventService_serviceDesc, srv)
}

func _CreateEventService_SendCreateEventMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEventMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreateEventServiceServer).SendCreateEventMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CreateEventService/SendCreateEventMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreateEventServiceServer).SendCreateEventMessage(ctx, req.(*CreateEventMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _CreateEventService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.CreateEventService",
	HandlerType: (*CreateEventServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "sendCreateEventMessage",
			Handler:    _CreateEventService_SendCreateEventMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "events.proto",
}
